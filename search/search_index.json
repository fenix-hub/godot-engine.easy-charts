{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the godot-engine.easy-charts documentation!","text":"<p>Charts for Godot Engine, made easy.</p> <p>On this page, you find the documentation for to godot-engine.easy-charts plugion.</p> <p>To get started, have a look at Installation and Getting started. There is also documentation on more Advanced topics and Theming.</p> <p></p>"},{"location":"advanced-topics/","title":"Advanced Topics","text":"<p>This page contains some more detailed and advanced topics.</p>"},{"location":"advanced-topics/#discrete-axis-for-strings-or-integers","title":"Discrete axis for strings or integers","text":"<p>If the x or y values of your function are integers or floats, the chart will default to continuous axes which means, it will support interpolation of ticks and dynamically adjust the axes ranges.</p> <p>If you have specific string values for one domain, you can simply use them as x-values when creating the <code>Function</code>:</p> <pre><code>var f := Function.new(\n        ['A', 'B', 'C'],\n        [10, 20, 15],\n        'Function Name',\n        { color = Color.GREEN, marker = Function.Marker.CIRCLE, type = Function.Type.SCATTER }\n    )\n</code></pre> <p>In case you have a y-axis domain of integers and want to make it discrite (i.e. avoid any interpolation), you have to override the default behavior by defining your own <code>ChartAxisDomain</code> and y-label printing function before plotting:</p> <pre><code>var y_max_value = ... # Compute the maximum of your y values\nchart.set_y_domain(0, y_max_value) # Overwrite the default y-domain\nchart.y_labels_function = func(value: float): return str(int(value)) # Define a custom y-label printing function\n\nchart.plot(f)\n</code></pre> <p>A working example can be found in the <code>ScatterChartDiscrete</code> example in <code>addons/easy_charts/examples/scatter_chart_discrete/</code>. The following screenshot is from this example and illustrates a string-based x-domain (time as \"hours of day\") and integer-based y-domain (\"count of spotted animals\").</p> <p></p>"},{"location":"advanced-topics/#dynamic-data","title":"Dynamic data","text":"<p>In some use-cases, a static chart is not enough. You might monitor some in-game process or recieve life-data from an API. You can update the values of your function by using the <code>Function.add_point(x_value, y_value)</code> method. When you are done adding your new data, call <code>Chart.queue_redraw()</code> to enforce a redraw of the chart.</p> <pre><code>f1.add_point(200, cos(200) * 20)\nchart.queue_redraw()\n</code></pre> <p>Note</p> <p>Adding new points is only supported for a float-based x-axis domain at the moment.</p> <p>To limit the amount of data points drawn on the chart, you can use the <code>ChartProperties.max_samples</code> setting. It limits the number of drawn points by the provided amount. The data will still reside in your <code>Function</code> but will be skipped when drawing.</p> <p>You can have a look at the examples provided - most of them have a button to enable live data.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>After you installed easy-charts, it is time to create your first chart.</p>"},{"location":"getting-started/#basic-scene-setup","title":"Basic scene setup","text":"<p>Since charts are control-node based, create a new <code>Control</code> node scene. To keep this example simple, we will create the <code>Chart</code> as a direct child of our scene root. For real use-cases, you can create charts in any deeply nested <code>Control</code> or <code>Container</code> structure. The <code>Chart</code> will adjust and draw properly.</p>"},{"location":"getting-started/#create-a-chart-control","title":"Create a chart control","text":"<p>To create the chart, you have to instantiate the scene located at <code>addons/easy_charts/control_charts/chart.tscn</code>.</p> <p></p> <p>You can either do this via drag &amp; drop into the scene tree or by instantiating the scene via script:</p> <pre><code>extends Control\n\nfunc _ready() -&gt; void:\n    var chart_scene: PackedScene = load(\"res://addons/easy_charts/control_charts/chart.tscn\")\n    var chart: Chart = chart_scene.instantiate()\n    add_child(chart)\n</code></pre> <p>When running this, you will see an empty chart with placeholders for axis and title labels. On the output, you will see two errors indicating that an empty chart cannot be drawn. We will fix this in the next step!</p>"},{"location":"getting-started/#defining-functions","title":"Defining functions","text":"<p>To fill your chart with plots, you have to define <code>Function</code> objects and pass them to the <code>Chart.plot(...)</code> function. <code>Function</code>s have to be defined in code. Add the following code at the bottom of the <code>_ready()</code> function defined in the previous section:</p> <pre><code>    var function := Function.new(\n        [0, 1, 2, 3, 4, 5, 6],  # The function's X-values\n        [4, 8, 2, 9, 7, 8, 12], # The function's Y-values\n        \"First function\",       # The function's name\n        {\n            type = Function.Type.LINE,       # The function's type\n            marker = Function.Marker.SQUARE, # Some function types have additional configuraiton\n            color = Color(\"#36a2eb\"),        # The color of the drawn function\n        }\n    )\n\n    chart.plot([function])\n</code></pre> <p>The first two parameters of the constructor define the x- and y-values used for drawing. The next parameter defines the name of the function which is used in legend and tooltips. The last parameter is a <code>Dictionary</code> defining the type of the plot (a line chart in this example) and additional optional parameters (e.g. marker types and colors).</p> <p>Running the scene should give you a view similar to this:</p> <p></p> <p>To add multiple plots to the same chart, create multiple <code>Function</code> objects and pass them as part of the array.</p>"},{"location":"getting-started/#additional-configuration-with-chartproperties","title":"Additional configuration with <code>ChartProperties</code>","text":"<p>The <code>Chart.plot()</code> funciton takes a second parameter of type <code>ChartProperties</code>. This can be used to further customize the chart. For example, you can define axis labels and enable the legend by adding the following properties and passing them to the plot function:</p> <pre><code>    var chart_properties := ChartProperties.new()\n    chart_properties.x_label = \"X-Axis\"\n    chart_properties.y_label = \"Y-Axis\"\n    chart_properties.title = \"Example chart\"\n    chart_properties.show_legend = true\n\n    chart.plot([function], chart_properties)\n</code></pre> <p>The result should look as follows:</p> <p></p> <p>A note about theming</p> <p>The <code>ChartProperties</code> also contains settings to control drawing of the chart, like background colors, grids and ticks. However, these are deprecated in favor of using a <code>Theme</code>. See Theming for details.</p>"},{"location":"getting-started/#putting-it-all-together","title":"Putting it all together","text":"<p>The full script of this introduction looks like this:</p> <pre><code>extends Control\n\nfunc _ready() -&gt; void:\n    var chart_scene: PackedScene = load(\"res://addons/easy_charts/control_charts/chart.tscn\")\n    var chart: Chart = chart_scene.instantiate()\n    add_child(chart)\n\n    var function := Function.new(\n        [0, 1, 2, 3, 4, 5, 6],  # The function's X-values\n        [4, 8, 2, 9, 7, 8, 12], # The function's Y-values\n        \"First function\",       # The function's name\n        {\n            type = Function.Type.LINE,       # The function's type\n            marker = Function.Marker.SQUARE, # Some function types have additional configuraiton\n            color = Color(\"#36a2eb\"),        # The color of the drawn function\n        }\n    )\n\n    var chart_properties := ChartProperties.new()\n    chart_properties.x_label = \"X-Axis\"\n    chart_properties.y_label = \"Y-Axis\"\n    chart_properties.title = \"Example chart\"\n    chart_properties.show_legend = true\n\n    chart.plot([function], chart_properties)\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>You can either download easy charts from the Godot Asset Library or from Github.</p>"},{"location":"installation/#godot-asset-library","title":"Godot Asset Library","text":"<p>Open the AssetLib in the godot editor and search for \"easy charts\". Then click the addon and select \"Download\" in the dialog that pops up. If you do not want to include the examples, you can de-select them inside the install popup.</p> <p></p>"},{"location":"installation/#github","title":"Github","text":"<p>To get a different or the latest version of the addon, you can download it from github. To get the latest version, simply click on \"Code\" and choose the \"Download ZIP\" option. Older versions can be fetched from the Releases Page. Just unzip the file into your projects main directory (the ZIP-file contains the <code>/addons/easy-charts</code> subdirectories).</p> <p></p>"},{"location":"theming/","title":"Theming","text":"<p>Since version V28.08.25, themes are used to style easy charts.</p> <p>Deprecation note</p> <p>In previous versions, settings in <code>ChartPropeties</code> have been used. This is now deprecated and you should update to use themes instead!</p> <p>If you want to learn by example, have a look at <code>addons/easy_charts/examples/theming/</code>. It contains a UI that allows to switch between different themes.</p> <p>If you want to dive right into code, have a look at the <code>addons/easy_charts/control_charts/default_chart_theme.tres</code> resource. It contains the default configuration and shows which options are exposed.</p>"},{"location":"theming/#create-your-own-theme","title":"Create your own theme","text":"<p>To create your own theme, you can either</p> <ul> <li>create a copy of <code>addons/easy_charts/control_charts/default_chart_theme.tres</code> and assign it to your chart or any parent control node</li> <li>or you can copy its properties and assign it to one of your existing <code>Theme</code>s.</li> </ul>"},{"location":"theming/#theme-explained","title":"Theme explained","text":"<p>The following image illustrates the theme items of the <code>Chart</code> control:</p> <p></p> <p>Note on the plot_area StyleBox</p> <p>For the plot area, only the boder color and backgorund color properties of the stylebox work. In future, support for all stylebox options will be integrated.</p>"},{"location":"theming/#changing-themes-at-runtime","title":"Changing themes at runtime","text":"<p>Due to backwards compatibility with previous versions of easy-charts, changing the theme at runtime is not fully supported. Right now, you have to destroy the chart and create a new instance. This is how the theming example works.</p>"}]}